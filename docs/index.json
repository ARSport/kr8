[
{
	"uri": "https://kr8.rocks/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": " Overview kr8 is a configuration management tool for Kubernetes, designed to generate deployable manifests for the components required to make your clusters usable.\nIts main function is to translate and manipulate YAML or JSON without using a templating engine.\nIts flexibility means you can perform operations such as:\n Use existing helm charts, and patch the resources in them Use other overlay tools, like Kustomize Create resources in pure JSON or Jsonnet  Goals \u0026amp; Focus The focus with kr8 is not to make deploying applications easier. We believe this problem is already being tackled quite widely and with excellent success rates.\nThe main aim of kr8 is to allow Cluster operators to generate the manifests needed to deploy key cluster components to different clusters.\nIt\u0026rsquo;s designed to prevent configuration mismatches between (for example) development and production clusters and to prevent snowflake cluster deployments.\n"
},
{
	"uri": "https://kr8.rocks/advanced/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kr8.rocks/concepts/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": " Components A component is a deployable unit that you wish to install to multiple clusters.\nYour component might begin life before kr8 in one of a few ways:\n a Helm Chart a static YAML manifest some Jsonnet  but they all have something in common - you need to deploy it to multiple clusters with slight differences in configuration.\nComponent components There are several key pieces that make up a component before you write a line of configuration.\nTaskfile This task file lives inside the component directory. It should contain two tasks:\n fetch - a manually run task which downloads all the components\u0026rsquo; dependencies (for example, helm chart or static manifest) generate - this is the task that\u0026rsquo;s run when kr8 generates the manifest for the cluster  These tasks will be highly dependent on the particular component - for example, a component using a helm chart will generally have a different set of fetch and generate tasks to a component using a static manifest.\nAn example Taskfile might look like this:\nversion: 2 vars: KR8_COMPONENT: kubemonkey tasks: fetch: desc: \u0026#34;fetch component kubemonkey\u0026#34; cmds: - curl -L https://github.com/asobti/kube-monkey/tarball/master \u0026gt; kubemonkey.tar.gz # download the local helm chart from the git repo - tar --strip-components=2 -xzvf kubemonkey.tar.gz asobti-kube-monkey-{{.GIT_COMMIT}}/helm # extract it - mv kubemonkey charts # place it in a charts directory - rm -fr *.tar.gz # remove the tar.gz from the repo vars: GIT_COMMIT: sh: curl -s https://api.github.com/repos/asobti/kube-monkey/commits/master | jq .sha -r | xargs git rev-parse --short generate: desc: \u0026#34;generate\u0026#34; cmds: - KR8_COMPONENT={{.KR8_COMPONENT}} kr8-helpers clean-output # clean the tmp directories each time we generate - KR8_COMPONENT={{.KR8_COMPONENT}} kr8-helpers helm-render-with-patch \u0026#34;{{.KR8_COMPONENT}}\u0026#34; patches.jsonnet # our generate command, which in this case is a helm-render with some patches in a jsonnet file Params kr8\u0026rsquo;s most useful feature is the ability to configure parameters for a specific cluster. It does that by specifying a params.jsonnet in each component.\nThere are some required parameters which always must exist. They are:\n namespace: the namespace the component should be installed in release_name: analogous to a helm release - what the component should be called when it\u0026rsquo;s installed into a cluster kubecfg_gc_enable: whether this component should be garbage collected when the deployer script cleans up this component (generally should be false for important system components like namespaces)  Without these parameters, components will not install a function. A barebones params.jsonnet would look like this:\n{ namespace: \u0026#39;kubemonkey\u0026#39;, release_name: \u0026#39;kubemonkey\u0026#39;, kubecfg_gc_enable: true, } Cluster specific parameters Once you start to install components into clusters, you\u0026rsquo;ll want to specify parameters of your own.\nThese are done in the params.jsonnet and you can either specify a default, or make it mandatory using jsonnet\u0026rsquo;s error.\nHere\u0026rsquo;s an more detailed example:\n{ namespace: \u0026#39;kubemonkey\u0026#39;, release_name: \u0026#39;kubemonkey\u0026#39;, kubecfg_gc_enable: true, dry_run: false, run_hour: error \u0026#39;Must specify a time for kubemonkey to run\u0026#39; } Manifests The final part of your component is the actual manifest generation. This depends on the source you\u0026rsquo;re generating from. You can find more information about how to generate manifests in the advanced components section of the documentation\n"
},
{
	"uri": "https://kr8.rocks/concepts/clusters/",
	"title": "Clusters",
	"tags": [],
	"description": "",
	"content": " Components "
},
{
	"uri": "https://kr8.rocks/advanced/components/helm/",
	"title": "Helm Components",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kr8.rocks/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Installation Github Releases We build binaries for OS X and Linux using goreleaser\nSimply head over to the releases page to grab the latest version.\nHomebrew We maintain a homebrew tap which makes installing on OS X a breeze. Simply add the tap and install:\nbrew tap apptio/tap brew install kr8 The homebrew tap will install the below dependencies for you. If you\u0026rsquo;re using anything other than homebrew, you\u0026rsquo;ll need to ensure you have the dependencies below\nDependencies The kr8 binary is currently just one of a set of required dependencies. We plan to explore the need for these dependencies as time goes on, but right now, yhey are required.\ngo-task go-task is used inside components and for cluster config generation. It was chosen over Make because it supports parallel builds and JSON files as input (meaning we can use jsonnet to build the files, if needed).\nInstallation Check out the go-task install docs for information on installing go-task\nHelm If you plan on rendering and manipulating helm charts in your kr8-configs, you\u0026rsquo;ll need the helm command line tool installed.\nInstallation Check out the helm installation docs for information on installing go-task\nHelm will not work unless you initialize it on your client machine.\nBy default, it\u0026rsquo;ll ask you to run helm init - which will install the tiller component and presents a security risk\nYou should use helm init --client-only for kr8\n "
},
{
	"uri": "https://kr8.rocks/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "",
	"content": "kr8 has two main concepts you should be aware of before you get started:\n components clusters  The relationship between components and clusters are simple: components are installed on clusters. You will have components that are install on all clusters, and some components will only be installed on some clusters.\nComponents can be declared multiple times within a cluster, as long as they are named distinctly.\nClusters are unique and singular\nRead more about components and clusters\n"
},
{
	"uri": "https://kr8.rocks/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": " Initializing your Config Adding a Component Adding a Cluster Add Component to Cluster Generate your Manifests "
},
{
	"uri": "https://kr8.rocks/advanced/",
	"title": "Advanced",
	"tags": [],
	"description": "",
	"content": " Multiple Components in a Cluster Sealed Secrets "
},
{
	"uri": "https://kr8.rocks/contributing/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": " Building from Source Dependencies kr8 uses Go modules for its dependencies, so there\u0026rsquo;s no longer any need to clone into your $GOPATH.\nSimply clone into any directory and then download the modules:\ngit clone https://github.com/apptio/kr8.git go mod download  Building Once you\u0026rsquo;ve downloaded all the dependencies, you should be able to build easily:\ngo build -o kr8  We use goreleaser for building the final binaries, so if you\u0026rsquo;d like to build a snapshot version, simple run:\ngoreleaser --skip-publish --snapshot --rm-dist  "
},
{
	"uri": "https://kr8.rocks/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Made with love @apptio\n"
},
{
	"uri": "https://kr8.rocks/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " kr8 Welcome to the kr8 documentation site.\nIf you\u0026rsquo;re new to kr8, head over to the About section to learn why we built kr8 or the Installation section for more on installing kr8.\n"
},
{
	"uri": "https://kr8.rocks/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kr8.rocks/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]